default_platform(:ios)

platform :ios do

  desc "Push a new build to App Store Connect"
  lane :build do
    ensure_git_status_clean
    update_build_number
    xcodegen
    login
    match(type: "appstore", readonly: true)
    build_ios_app
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  desc "Run tests"
  lane :test do
    xcodegen
    run_tests(
      fail_build: false,
      result_bundle: true
    )
    slather(
      proj: current_project,
      scheme: scanfile[:scheme],
      output_directory: "fastlane/test_output",
      cobertura_xml: true,
      build_directory: Actions.lane_context[SharedValues::SCAN_DERIVED_DATA_PATH]
    )
    code_coverage(
      file: "fastlane/test_output/cobertura.xml"
    )
    xctesthtmlreport
  end

  desc "Generate screenshots"
  lane :screenshots do |options|
    unless options[:skip_capture]
      capture_ios_screenshots(
        output_directory: "./fastlane/screenshots",
        clear_previous_screenshots: true,
        override_status_bar: true
      )
      Dir.glob("./screenshots/en-US/iPad Pro*.png") do |file|
        sh("cp #{file.shellescape} #{file.gsub(/5th generation/, "4th generation").shellescape}")
        sh("mv #{file.shellescape} #{file.gsub(/5th generation/, "2nd generation").shellescape}")
      end
    end
    frame_screenshots(path: "./fastlane/screenshots")
  end

  desc "Upload screenshots"
  lane :upload_screenshots do
    upload_to_app_store(
      screenshots_path: "./fastlane/screenshots",
      overwrite_screenshots: true,
      submit_for_review: false,
      run_precheck_before_submit: false
    )
  end
end

platform :mac do
  desc "Push a new build to App Store Connect"
  lane :build do
    # ensure_git_status_clean
    update_build_number
    xcodegen
    login
    match(type: "appstore", readonly: true)
    # match(type: "mac_installer_distribution", readonly: true)
    build_mac_app
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end
end

desc "Generates and compresses a press kit archive"
lane :presskit do
  login
  generate_presskit(
    screenshots_path: "./fastlane/screenshots",
    round_app_icons: true,
    app_icon_paths: {
      "app-icon-large.png": "./App/Assets.xcassets/AppIcon.appiconset/icon_512x512@2x.png",
      "app-icon-medium.png": "./App/Assets.xcassets/AppIcon.appiconset/Icon-60@2x.png",
      "app-icon-small.png": "./App/Assets.xcassets/AppIcon.appiconset/Icon-Notification@3x.png",
    }
  )
end

lane :code_signing do
  match(readonly: true)
end

private_lane :login do
  if is_ci
    create_api_key
  else
    Spaceship::ConnectAPI.login(
      portal_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      tunes_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)
    )
  end
end

private_lane :create_api_key do
  app_store_connect_api_key(
    key_id: ENV["FL_APPLE_KEY_ID"],
    issuer_id: ENV["FL_APPLE_ISSUER_ID"],
    key_content: ENV["FL_APPLE_KEY"],
    in_house: false
  )
end
