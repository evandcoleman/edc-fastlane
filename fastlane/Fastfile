default_platform(:ios)

platform :ios do

  desc "Push a new beta build to TestFlight"
  lane :beta do
    ensure_git_status_clean
    update_build_number
    xcodegen
    create_api_key
    match(type: "appstore")
    build_app
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )
  end

  desc "Run tests"
  lane :test do
    xcodegen
    run_tests(
      fail_build: false,
      result_bundle: true
    )
    slather(
      proj: current_project,
      scheme: scanfile[:scheme],
      output_directory: "fastlane/test_output",
      cobertura_xml: true,
      build_directory: Actions.lane_context[SharedValues::SCAN_DERIVED_DATA_PATH]
    )
    code_coverage(
      file: "fastlane/test_output/cobertura.xml"
    )
    xctesthtmlreport
  end

  desc "Generate screenshots"
  lane :screenshots do
    capture_ios_screenshots(
      output_directory: "./fastlane/screenshots",
      clear_previous_screenshots: true,
      override_status_bar: true
    )
    Dir.glob("./screenshots/en-US/iPad Pro*.png") do |file|
      sh("cp #{file.shellescape} #{file.gsub(/5th generation/, "4th generation").shellescape}")
      sh("mv #{file.shellescape} #{file.gsub(/5th generation/, "2nd generation").shellescape}")
    end
    frame_screenshots(path: "./fastlane/screenshots")
  end

  desc "Upload screenshots"
  lane :upload_screenshots do
    upload_to_app_store(
      screenshots_path: "./fastlane/screenshots",
      overwrite_screenshots: true,
      submit_for_review: false,
      run_precheck_before_submit: false
    )
  end

  desc "Generate launch image"
  lane :launch_image do
    capture_ios_screenshots(
      scheme: "LaunchImageUITests",
      skip_open_summary: true,
      output_directory: "./fastlane/launch-images"
    )
  end

  private_lane :create_api_key do
    app_store_connect_api_key(
      key_id: ENV["FL_APPLE_KEY_ID"],
      issuer_id: ENV["FL_APPLE_ISSUER_ID"],
      key_content: ENV["FL_APPLE_KEY"],
      in_house: false
    )
  end
end
